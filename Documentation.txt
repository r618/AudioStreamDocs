::written@::v2.6.6::1o.2o22::2019.4.0::

.: General usage notes and concepts overview :.
===============================================================================

Note: >> When working with audio it's often very useful to turn on 'Run In Background' in player settings to keep audio running when switching out of the Editor.

(For 2022 and up -> please enable non secure HTTP downloads in 2022 (and up) Player settings in order to use links in the demo
| Go to Edit -> Project Settings -> Player -> Other Settings > Configuration and set 'Allow downloads over HTTP' to 'Always allowed'. Alternatively, use your own secure (HTTPS) links only.)


This file is more of an overview, with generic components - for each specific topic please see 'DocumentationNNN_[topic].txt' file/s next to this one.


'Documentation000_audio_streaming'

'Documentation010_recording_and_inputs'

'Documentation020_system_outputs'

'Documentation021_channels_separation'

'Documentation030_3D_spatialisation'

'Documentation040_Icecast'

'Documentation050_LAN_source_client'

'Documentation060_mobiles'

'Documentation070_ASIO'


===============================================================================
GOAudioSaveToFile:
===============================================================================

- utility script that allows automatic or manual saving of audio being played on a Game Object to a file in WAV PCM16 format
- file is saved into StreamingAssets, except on iOS, Android and WSA where Application.persistentDataPath is used (also see https://docs.unity3d.com/ScriptReference/Application-persistentDataPath.html)

You can drive it also externally by passing write data yourself - just uncheck useThisGameObjectAudio in that case and call 'AddToSave' on it periodically [at OnAudioFilterRead rate] after it's started via 'StartSaving'.

On iOS you can enable 'Application supports iTunes file sharing' entitlement to (more easily) retrieve/access the application data container and saved files.



===============================================================================
IL2CPP builds and building with turned off IL2CPP runtime checks:
===============================================================================
 
Code running most tight audio loops can be optionally built with null, array bounds and division by zero checks turned off for IL2CPP builds (which is generally recommended but it's advisable to verify that build is running correctly with them being turned off first)

The needed attributes for this are included in the package, but you are advised to verify this, i.e. check for your Unity version, see e.g. https://docs.unity3d.com/2018.4/Documentation/Manual/IL2CPP-CompilerOptions.html (and your/respective Editor version) how to do that.
The file 'Il2CppSetOptionAttribute.cs' must be placed into project's 'AudioStream/Support' folder (or any of its subfolders) - must be part of the 'AudioStreamSupport' assembly definition

- if project doesn't have ENABLE_IL2CPP compiler define added already, add ENABLE_IL2CPP to Scripting Define Symbols in Player Settings


===============================================================================
Customizable cache location:
===============================================================================

2.6 and up - added new 'RuntimeSettings' scriptable object to 'AudioStream\Scripts\AudioStreamSupport\Resources' with customizable path to cache folder
- enter full path to a cache directory, or leave empty to use dafault (Application.temporaryCachePath) location
AudioStreamDownload, AudioStreamMemory and AudioStream when using DISK as cache will use this location to save all its cached data.

. saving original compressed stream instead of fully decompressed raw PCM data is planned
