::written@::v2.6.6::1o.2o22::2019.4.0::

===========================================
AudioStream and network audio:
===========================================

LAN distributed streaming/playback:
===================================

Version 1.7.3 introduced two new components that enable streaming and receiving audio via local network using UNET (Unity networking): AudioStreamUNETSource and AudioStreamUNETClient.
The audio is encoded and decoded using C# port of Opus codec by Logan Stromberg: https://github.com/lostromb/concentus
Server's IP address is needed on the client currently in order to connect, playback starts immediately on source - see AudioStreamUNETSourceDemo and AudioStreamUNETClientDemo demo scenes in Network/AudioStreamUNETDemo/
also for options available for encoder and decoder.
Codec is very efficient and both encoding and decoding run in each own thread in order to not stall Unity's audio buffer, latency on receiving end(client) depends on Unity AudioClip, usable for realtime changes on the server (e.g. using a microphone over LAN).
Opus/Concentus support _only_ 1 or 2 channels audio for now.



Notes on frame size and MTU:
----------------------------------------------
	
	Since reliable sequenced packet distribution is needed, fragmented messages cannot be sent and this poses some restriction on the network, mainly on routers and their/usual MTU (or Maximum transmission unit), which is usually around 1500 bytes on common home networks.
This implies size for Opus encoder ( 960 for 1 channel, both channel encoded are below the 1500 MTU limit ), buffer should to fit below the size limit.
Otherwise there are no restirctions on the conenction or Unity project audio latency eihter for source or client.

Also, in order to successfully receive all packets the network endcoder has to perform reliably and quickly enough which was not the case on e.g. lower end phones / device such as iPhone 7 had no problems /

By default maximum of 10 clients are allowed to connect to one source - this is configurable and with higher number should run without problems on sufficient hardware.

Be sure to have have 'Run in Background' turned on in Player settings when running source and client at the same time.

* In 1.9 UNET transport was replaced with NetMQ networking library for LAN streaming, the above should roughly apply still.

	The included NetMQ library is targeted for .NET 3.5 since 2017 LTS has 3.5 runtime as default, but can be used with 4.6 runtime.
Due to that it has a small drawback though in that the server IP on client must be reachable, otherwise it deadlocks when connecting.
NetMQ is much more robust though, it can e.g. seamlessly reconnect after either server or client drops the connection.
Be sure to compile with 4.x runtime when on iOS.
