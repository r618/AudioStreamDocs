::v3.0::1o.2o22::2019.4.0::

================================================================================
Audio over LAN:
================================================================================

	There are two components based on NetMQ messaging library that enable streaming and receiving audio via local network (LAN):
AudioStreamNetMQSource and AudioStreamNetMQClient,
		which function as connectors of two AudioSources over a local network.

	Audio can be either encoded/decoded using OPUS codec - C# port by Logan Stromberg [https://github.com/lostromb/concentus], or sent directly without any encoding
Server's IP address and port are needed on the client in order to connect, - see AudioStreamNetMQSourceDemo and AudioStreamNetMQClientDemo demo scenes in Network/AudioStreamNetMQDemo/ - also for options available for encoder and decoder.

	OPUS codec:
		Codec is very efficient and both encoding and decoding run in each own thread in order to not stall Unity's audio buffer, latency on receiving end(client) depends on Unity AudioClip, usable for realtime changes on the server (e.g. using a microphone over LAN).
	Opus/Concentus support currently _only_ 1 or 2 channels audio. For all options see also component inspector/demo scene.

	PCM 'codec':
		Audio is sent directly as unprocessed Unity audio buffer - this removes channels limitation
		Be aware that
		- much higher network bandwidth is required
		- the only supported latency / DSP Buffer Size in project Audio settings are 'Good latency' and 'Best performance'; when using 'Best latency' the audio buffer rate exceeds the library 
		messages handling capabilities and it's not usable

	OPUS channels limitation should be possibly updated in later version, and OSC will be probably used as transport library in the future too

	Note: for more comfortable audio transfer over LAN based on Unity Netcode for GameObjects see also AudioStreamNetCode [https://assetstore.unity.com/packages/slug/233329?aid=1100l7sC8]

Notes on frame size and MTU:
--------------------------------------------------------------------------------
	
	Since reliable sequenced packet distribution is needed, fragmented messages cannot be sent and this poses some restriction on the network, mainly on routers and their/usual MTU (or Maximum transmission unit), which is usually around 1500 bytes on common home networks.
This implies size for Opus encoder ( 960 for 1 channel, both channel encoded are below the 1500 MTU limit ), buffer should to fit below the size limit.
Otherwise there are no restrictions on the connection or Unity project audio latency either for source or client when using OPUS encoding

Also, in order to successfully receive all packets the network encoder has to perform reliably and quickly enough which was not the case on e.g. lower-end phones/devices such as iPhone 7 had no problems /

By default maximum of 10 clients are allowed to connect to one source - this is configurable and with higher number should run without problems on sufficient hardware.

Be sure to have have 'Run in Background' turned on in Player settings when running source and client at the same time.


NetMQ messaging library:
--------------------------------------------------------------------------------

	NetMQ.dll is included as prebuilt assembly, together with its dependency AsyncIO.dll - these are replaceable with any other more recent/other versions if needed.

	It is targeted for .NET 3.5 since 2017 LTS has 3.5 runtime as default, but can be used with 4.6 runtime.

Due to that there was a drawback though in that the server IP on client must be reachable, otherwise it can deadlock while connecting.
	(iOS required this to be compiled with 4.x runtime, but this should now be always the case)
